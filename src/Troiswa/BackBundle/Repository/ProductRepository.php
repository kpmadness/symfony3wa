<?php

namespace Troiswa\BackBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * ProductRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductRepository extends EntityRepository
{

    public function findProductByQuantity($qty=null)
    {

        $query= $this->createQueryBuilder("prod");

        if($qty!=null){

            switch ($qty) {
                case 0 :
                    $query->select('COUNT(prod)')
                        ->where("prod.quantity = :qtyVal")
                        ->setParameter("qtyVal", $qty);
                    $result = $query->getQuery()->getSingleResult();
                    break;
                case 5 :
                    $query->where("prod.quantity < :qtyVal")
                        ->setParameter("qtyVal", $qty);
                    $result = $query->getQuery()->getResult();
                    break;
            }
        }

//      dump($this->_entityName);
//      die;

        return $query->getQuery()->getResult();
    }

    public function findProductByActive($active)
    {

        $query= $this->createQueryBuilder("prod");

            if ($active != null) {

                switch ($active) {
                    case 0 :
                    case 1 :
                        $query->select('COUNT(prod)')
                              ->where("prod.active = :active")
                              ->setParameter("active", $active);
                        break;
                    case 2 :
                        $query->select('COUNT(prod)')
                              ->where("prod.active = :active1")
                              ->orWhere("prod.active = :active2")
                              ->setParameter("active1", 0)
                              ->setParameter("active2", 1);
                        break;
                }

                $result = $query->getQuery()->getSingleResult();
            }

        dump($result);
        die();

        return $result;
    }

    public function findProductGroupByActive()
    {

        $query= $this->createQueryBuilder("prod");

        $query->select('COUNT(prod)')
              ->groupBy('prod.active');

        $result = $query->getQuery()->getResult();


//        dump($result);
//        die();

        return $result;

    }

    public function findProductBetweenPrice($price){

        $query= $this->createQueryBuilder("prod");

        if($price!=null){
            $query->select('prod')
                ->where("prod.active = :min-price")
                ->andWhere("prod.price = :max-price")
                ->setParameter("min-price", $price['min-price'])
                ->setParameter("max-price", $price['max-price']);
        }

        $result = $query->getQuery()->getResult();


//        dump($result);
//        die();

        return $result;

    }

    public function findProductToDisplayFront($nbProd){

        $query= $this->createQueryBuilder("prod");

        $query->select('prod')
              ->where("prod.active = :active")
              ->andWhere("prod.cover is not null")
              ->andWhere("prod.quantity > :quantity")
              ->setParameter("active", 1)
              ->setParameter("quantity", 0)
              ->orderBy('prod.dateCreated','DESC')
              ->setMaxResults($nbProd);

        $result = $query->getQuery()->getResult();

//        dump($result);
//        die();

        return $result;
    }

//    public function findProductWithMaxTag(){
//
//        $query= $this->createQueryBuilder("prod");
//
//        $query->leftJoin('product_tag as pt')
//              ->addSelect('COUNT(pt.product.id)')
//
//
//              ->where("p.id = pt.product_id")
//              ->andWhere("p.active = :active")
//              ->andWhere("prod.quantity > :quantity")
//              ->setParameter("active", 1)
//              ->orderBy('p.id','ASC')
//              ->groupBy('pt.product_id');
//
//
//        $result = $query->getQuery()->getResult();
//
////        dump($result);
////        die();
//
//        return $result;
//    }

    public function findProductCartFrontAction($tabId){

        $query= $this->createQueryBuilder("prod");

        $query->select('prod')
              ->where("prod.id IN ( :tabId )")
              ->setParameter("tabId",$tabId);

        $result = $query->getQuery()->getResult();

        return $result;

    }

}
